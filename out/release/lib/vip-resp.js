// Generated by CoffeeScript 1.4.0
var VipStatus, fs, http, net, os, path;

path = require('path');

os = require('options-stream');

http = require('http');

net = require('net');

fs = require('fs');

VipStatus = (function() {
  var response;

  function VipStatus(options) {
    if (options == null) {
      options = {};
    }
    this.options = os({
      check_health: function(cb) {
        return process.nextTick(cb);
      },
      sock_path: "" + (path.dirname(process.mainModule.filename)) + "/run/" + (path.basename(process.mainModule.filename)) + "-vr.sock",
      status_url: '/status.taobao',
      success_body: 'success',
      timeout: 2000
    }, options);
    this.status = this.status.bind(this);
    this.force = 'auto';
    this.net = null;
    this.listen();
  }

  VipStatus.prototype.listen = function() {
    var _this = this;
    if (fs.existsSync(this.options.sock_path)) {
      fs.unlinkSync(this.options.sock_path);
    }
    return this.net = net.createServer(function(conn) {
      return conn.on('data', function(data) {
        _this.force = data.toString().trim().toLowerCase();
        if (_this.force !== 'on' && _this.force !== 'off') {
          return _this.force = 'auto';
        }
      });
    }).listen(this.options.sock_path);
  };

  VipStatus.prototype.close = function(cb) {
    var _this = this;
    if (!this.net) {
      return cb(null);
    }
    return this.net.close(function() {
      if (fs.existsSync(_this.options.sock_path)) {
        return fs.unlink(_this.options.sock_path, cb);
      } else {
        return cb(null);
      }
    });
  };

  response = function(resp, code, phrase) {
    resp.setHeader('Content-Type', 'text/plain');
    resp.statusCode = code;
    resp.end(phrase);
  };

  VipStatus.prototype.status = function(req, resp, next) {
    var end, timeout,
      _this = this;
    end = false;
    if (req.url !== this.options.status_url) {
      if (resp._hasConnectPatch) {
        next();
      } else {
        next(req, resp);
      }
      return;
    }
    if (this.force === 'on') {
      response(resp, 200, this.options.success_body);
    } else if (this.force === 'off') {
      response(resp, 503, 'Service Unavailable');
    } else {
      timeout = setTimeout(function() {
        if (end) {
          return;
        }
        response(resp, 504, 'Gateway Timeout');
        end = true;
      }, this.options.timeout);
      this.options.check_health(function(err) {
        if (end) {
          return;
        }
        if (err) {
          response(resp, 500, "Internal Server Error\r\n" + err);
        } else {
          response(resp, 200, _this.options.success_body);
        }
        end = true;
        clearTimeout(timeout);
      });
    }
  };

  return VipStatus;

})();

module.exports = function(options) {
  return new VipStatus(options);
};
